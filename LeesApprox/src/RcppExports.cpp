// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// linear_int
NumericVector linear_int(NumericVector x, NumericVector y, NumericVector xout);
RcppExport SEXP _LeesApprox_linear_int(SEXP xSEXP, SEXP ySEXP, SEXP xoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xout(xoutSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_int(x, y, xout));
    return rcpp_result_gen;
END_RCPP
}
// calcprob
NumericVector calcprob(NumericVector x, NumericVector y, NumericVector xout, NumericVector LenBins);
RcppExport SEXP _LeesApprox_calcprob(SEXP xSEXP, SEXP ySEXP, SEXP xoutSEXP, SEXP LenBinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xout(xoutSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LenBins(LenBinsSEXP);
    rcpp_result_gen = Rcpp::wrap(calcprob(x, y, xout, LenBins));
    return rcpp_result_gen;
END_RCPP
}
// myseq_by
Rcpp::NumericVector myseq_by(double x, double y, double by);
RcppExport SEXP _LeesApprox_myseq_by(SEXP xSEXP, SEXP ySEXP, SEXP bySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type by(bySEXP);
    rcpp_result_gen = Rcpp::wrap(myseq_by(x, y, by));
    return rcpp_result_gen;
END_RCPP
}
// myseq_len
NumericVector myseq_len(double start, double end, double length);
RcppExport SEXP _LeesApprox_myseq_len(SEXP startSEXP, SEXP endSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type end(endSEXP);
    Rcpp::traits::input_parameter< double >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(myseq_len(start, end, length));
    return rcpp_result_gen;
END_RCPP
}
// LeesApprox
List LeesApprox(NumericVector FVec, int ngtg, double maxsd, double binwidth, double M, double Linf, double K, double t0, double LFS, double L5, double Vmaxlen, double LinfCV, int maxage);
RcppExport SEXP _LeesApprox_LeesApprox(SEXP FVecSEXP, SEXP ngtgSEXP, SEXP maxsdSEXP, SEXP binwidthSEXP, SEXP MSEXP, SEXP LinfSEXP, SEXP KSEXP, SEXP t0SEXP, SEXP LFSSEXP, SEXP L5SEXP, SEXP VmaxlenSEXP, SEXP LinfCVSEXP, SEXP maxageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type FVec(FVecSEXP);
    Rcpp::traits::input_parameter< int >::type ngtg(ngtgSEXP);
    Rcpp::traits::input_parameter< double >::type maxsd(maxsdSEXP);
    Rcpp::traits::input_parameter< double >::type binwidth(binwidthSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type Linf(LinfSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type LFS(LFSSEXP);
    Rcpp::traits::input_parameter< double >::type L5(L5SEXP);
    Rcpp::traits::input_parameter< double >::type Vmaxlen(VmaxlenSEXP);
    Rcpp::traits::input_parameter< double >::type LinfCV(LinfCVSEXP);
    Rcpp::traits::input_parameter< int >::type maxage(maxageSEXP);
    rcpp_result_gen = Rcpp::wrap(LeesApprox(FVec, ngtg, maxsd, binwidth, M, Linf, K, t0, LFS, L5, Vmaxlen, LinfCV, maxage));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LeesApprox_linear_int", (DL_FUNC) &_LeesApprox_linear_int, 3},
    {"_LeesApprox_calcprob", (DL_FUNC) &_LeesApprox_calcprob, 4},
    {"_LeesApprox_myseq_by", (DL_FUNC) &_LeesApprox_myseq_by, 3},
    {"_LeesApprox_myseq_len", (DL_FUNC) &_LeesApprox_myseq_len, 3},
    {"_LeesApprox_LeesApprox", (DL_FUNC) &_LeesApprox_LeesApprox, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_LeesApprox(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
